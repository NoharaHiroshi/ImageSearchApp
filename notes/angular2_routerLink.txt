如何在视图中跳转到其他链接？通常使用a标签进行跳转

通常在a标签中加入routerLink，来使路由器可以控制这个a标签

看一下常见的格式
    <a routerLink='/dashboard/home' routerLinkActive='active'>Home1</a>
    <a routerLink='/dashboard/home' [routerLinkActive]="['active']">Home2</a>
    <a routerLink='../home' routerLinkActive="active">Home 2.2 </a>
    <a [routerLink]="['/dashboard/home']" [routerLinkActive]="['active']">Home3</a>
    <a [routerLink]="['../home']" [routerLinkActive]="['active']">Home4</a>
    <a [routerLink]="['../home']" [routerLinkActive]="['active']">Home5</a>
    <a [routerLinkActive]="['active']" (click)="onSelect()">Home6</a>

可以发现大致分为两种情况
<a routerLink=''>和<a [routerLink]="['']">，它们有什么区别？
routerLink是属性，[routerLink]是属性指令

逐条分析一下

1、<a routerLink='/dashboard/home' routerLinkActive='active'>Home1</a>
   '/dashboard/home': 以'/'开头，说明当前URL是相对于根目录合成最终路由进行导航的，这里我有一个疑问，它现在的根目录是基于base href呢？
   还是Angular配置中“真正“的根目录呢？经过测试，发现这个'/'相对的根目录是基于base href的。
   举个例子，<base href="/manage/"> 根目录设置：http://127.0.0.1:8899，
   <a routerLink='/menu_conf' routerLinkActive='active'>菜单编辑</a>
   那么a标签最后合成的URL：http://127.0.0.1:8899/manage/menu_conf， 不是http://127.0.0.1:8899/menu_conf

   另外写明的一点是：注意区分路由列表中的path和a标签中的href
   在路由列表中，path是不能以'/'开头的，否则无法和base href合成最终URL
   在a标签中，routerLink中的路由是可以以'/'开头的，表示基于根目录跳转，这个根目录就是项目设置的路径 + base href设置的路径（base href是相对路径的情况下）

2、<a routerLink='/dashboard/home' [routerLinkActive]="['active']">Home2</a>
   第一个是routerLink是属性，后面那个是属性指令，"['active']"列表中的active为什么要加''?因为不加，就会被认为是一个变量而在组件中查找

3、<a routerLink='../home' routerLinkActive="active">Home 2.2 </a>
   '../home'是相对路径，相对于当前路径的上一级进行跳转，例如现在路径是/dashboard/conf， 点击了当前路径，那么就跳转到了/dashboard/home
   其实很少用到。

4、5、6其实差不多，只是将属性换成了属性指令。

7、这里的路由跳转使用了方法进行跳转，在组件中定义好了跳转的路由
   this.router.navigate(['../home'],{relativeTo:this.route});
   这种方法之后会做介绍。
   其实前面的不管是属性routerLink还是指令属性[routerLink]，其实最后都转化成组件中的Router的navigate()方法进行导航

   使用a标签进行跳转和在组件中使用router.navigate导航有什么不同？
   使用a标签进行导航，浏览器中的url会首先产生变化，然后路由器被激活，开始查找匹配到的路由，随即渲染当前路由相对应的组件。
   使用组件router.navigate导航，先会激活路由器，查找对应的路由，渲染视图，最后将路径同步到地址栏。

## a标签跳转总结 ##
    1、 a标签可以使用属性routerLink和属性指令[routerLink]进行跳转，属性通常用于没有参数的链接跳转。属性指令通常用于带参数的链接跳转。
    2、 路由列表中的path不能在前面加'/'，而a标签中的路径前可以加'/'，表示基于根目录，而根目录代表的是base href指定的根目录
    3、 指令属性[routerLink]='['']', 列表的内外都要记得加上''

关于routerLinkActive
    routerLinkActive可以区分出正在活动的路由。当关联的routerLink被激活时，路由器会把routerLinkActive右边的css类（不只是active，可以任意指定）添加到这个元素上。
    这个功能通常用于想要高亮用户选择的路由。

    需要注意一点的是，这种样式激活的改变会沿着路由树一直往下传递。父路由和子路由可能同时被激活。
    <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
    当你点击的路由是'/user'或者是'/user/bob'时，当前a标签都会添加上active-link这个css样式类
    如果想精确匹配，可以把[routerLinkActiveOptions]绑定到{exact: true}表达式。
    如果使用了{ exact: true }，那么只有在其URL与当前URL精确匹配时才会激活指定的RouterLink。
    <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">Bob</a>

    如果你想指定多个css类
    <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
    <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
    指令方式或者是指令属性方式都是可以的
    但是我测试过，像这样混着用是错误的, [routerLinkActive]右边必须对应的是"['class1', 'class2']"这种形式
    <a routerLink="/user/bob" [routerLinkActive]="class1 class2">Bob</a>
    这样是错误的。

    扩展阅读：
    比较高阶的用法还有，可以将routerLinkActive的实例分配给模板变量，直接检查isActive状态。
    <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
        Bob {{ rla.isActive ? '(already open)' : ''}}
    </a>
    其中routerLinkActive作为指令赋值给模板变量rla，这样rla就可以获得路由是否被激活的状态

    另外，routerLinkActive不仅仅只能用在a标签上，看看下面的例子
    <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
        <a routerLink="/user/jim">Jim</a>
        <a routerLink="/user/bob">Bob</a>
    </div>
    当你的路由指向'/user/jim'或者'/user/bob'，div标签上的routerLinkActive同样处于激活状态。

    这是官方的routerLinkActive源码
    @Directive({
        selector: '[routerLinkActive]',
        exportAs: 'routerLinkActive'
    })
    class RouterLinkActive implements OnChanges, OnDestroy, AfterContentInit {
        constructor(router: Router, element: ElementRef, renderer: Renderer2, cdr: ChangeDetectorRef)
        links: QueryList<RouterLink>
        linksWithHrefs: QueryList<RouterLinkWithHref>
        get isActive: boolean
        routerLinkActiveOptions: {...}
        set routerLinkActive: string[] | string
        ngAfterContentInit(): void
        ngOnChanges(changes: SimpleChanges): void
        ngOnDestroy(): void
    }

    ## routerLinkActive总结 ##
    1、作用：当路由被激活时，可以动态的添加css类到这个路由上。
    2、routerLinkActive的值并非非得是active，可以任意指定css类
    3、routerLinkActive的值是多个css类，属性形式需要用空格隔开'class1 class2', 属性指令形式'['class1', 'class2']'，但是不能混用
    4、routerLinkActive激活是按照树路由顺序，想精确路由，使用[routerLinkActiveOptions]="{exact: true}"
    5、当前路由激活时，会显示class="指定css类 active"

关于带参数的路由
    { path: 'func_conf/detail/:id', component: FuncConfDetailComponent }
    其中:id被称为令牌，它为路由参数创建了一个空位。
    当我们进入/manage/#/func_conf/detail/6480690425115967488的时候，路由就会识别这种URL，id=6480690425115967488
    经过路由器拆分分析，组件就会接收到由ActivatedRouter提供到的id值

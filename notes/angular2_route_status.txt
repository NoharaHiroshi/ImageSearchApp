路由器的状态

在导航每个生命周期成功完成时，路由器会构建出一个ActivatedRoute组成的树，它表示路由器的当前状态。
我们可以在应用中的任何地方用Router服务及其routerState属性来访问当前的RouterState值。

路由器状态为我们提供了从任意激活路由开始向上或向下遍历路由树的一种方式，以获得关于父、子、兄弟路由的信息。

激活的路由

该路由的路径和参数可以通过注入进来的一个名叫ActivatedRoute的路由服务来获取。 它有一大堆有用的信息。

官方的源码

interface ActivatedRoute {
    snapshot: ActivatedRouteSnapshot
    url: Observable<UrlSegment[]>
    params: Observable<Params>
    queryParams: Observable<Params>
    fragment: Observable<string>
    data: Observable<Data>
    outlet: string
    component: Type<any> | string | null
    get routeConfig: Route | null
    get root: ActivatedRoute
    get parent: ActivatedRoute | null
    get firstChild: ActivatedRoute | null
    get children: ActivatedRoute[]
    get pathFromRoot: ActivatedRoute[]
    get paramMap: Observable<ParamMap>
    get queryParamMap: Observable<ParamMap>
    toString(): string
}

除此之外，好像也没讲点什么

上述是官方文档给出的解释，用我的话来讲就是：

当每次路由导航结束后，会根据当前路由器的激活情况，生成一个ActivatedRoute的实例。
我们可以通过在组件中注入ActivatedRoute来操作它
constructor(public route: ActivatedRoute) {}

目前这块的资料很少
项目中常用的有
this.route.params.switchMap((params: Params) => this.service.getDetail(params['id']||'0'))
    .subscribe(res => {
        this.func = res['func'];
    });
类似这种，用来获取数据的情况是目前遇到最多的，主要针对这块分析。

this.route.params是ActivatedRoute的BehaviorSubject类型的属性。
BehaviorSubject {_isScalar: false, observers: Array(1), closed: false, isStopped: false, hasError: false, …}
    closed: false
    hasError: false
    isStopped: false
    observers: [SwitchMapSubscriber]
    thrownError: null
    value: (...)
    _isScalar: false
    _value:{id: "6480690425115967488"}
    __proto__: Subject

主要是获取params中value的值





